
=encoding utf8

=head1 TITLE

DRAFT: Synopsis 32: Setting Library - Exception

=head1 AUTHORS

    Moritz Lenz <moritz@faui2k.org>

Authors of previous versions of this document:

    Tim Nelson <wayland@wayland.id.au>
    Larry Wall <larry@wall.org>

=head1 VERSION

    Created: 26 Feb 2009

    Last Modified: 29 April 2011
    Version: 3

The document is a draft.

If you read the HTML version, it is generated from the Pod in the specs
repository under
L<https://github.com/perl6/specs/blob/master/S32-setting-library/Exception.pod>
so edit it there in the git repository if you would like to make changes.

=head1 Roles

All built-in exceptions live in the C<X::> namespace.

=head2 X::Base

All built-in exceptions inherit from C<X::Base>, which provides some basic
behavior: storing  a backtrace and providing stringification.

    class X::Base {
        has $.backtrace;
        has $.message;
        method Str {
            # munge $.message
        }
        method ID { ... } # an actual stub that should be
                          # supplied by derived classes or
                          # mixed-in roles
    }

If C<$.message> contains substrings of the form C<< $<attrib> >>, the
C<Str> method of the error message looks those attributes up in C<self>
and interpolates them.

=head2 X::OS

    role X::OS { has $.os-error }

for all errors that are triggered by some error reported by the operating
system (failed IO, system calls, fork, memory allocation).

=head2 X::IO

    role X::IO { }

For IO related errors

=head2 X::NYI

    role X::NYI {
        has $.feature;
    }

For errors that stem from incomplete implementations of the Perl 6 language.
A full Perl 6.0 implementation should not throw such errors.

=head2 X::Comp

    role X::Comp {
        has $.filename;
        has $.line;
        has $.column;
    }

For errors that arise from compiling code. Note that in this case the
backtrace shows how the
compilation was triggered (through C<use SomeModule;>, C<eval>s etc.).
The actual location of the error does not appear in the backtrace, but
rather in the attributes defined in this role.

=head3 X::Syntax

    role X::Syntax does X::Comp { }

Common role for all syntax errors.

=head4 X::Syntax::Obsolete

    role X::Syntax::Obsolete does X::Syntax {
        has $.ID;
        has $.old;
        has $.new;
        has $.when = 'in Perl 6'
    }

Message defaults to C<< Unsupported use of $<old>;$<when> please use $<new> >>.

=head4 X::Syntax::BadInfix

    role X::Syntax::BadInfx does X::Syntax {
        has $.bad;
    }

Message defaults to C<< Preceding context expects a term, but found infix
$<bad> instead >>.

=head2 X::AdHoc

    class X::AdHoc is X::Base {
        has %.payload;
        method ID() { %.payload<ID> }
    }

L<X::AdHoc> is meant for those too lazy to write their own exception
classes, but who still want to benefit from structured exceptions.

The C<Str> method in C<X::AdHoc> lets attribute lookup fall back to items
in C<%.payload>, ie if there's no C<$.foo> accessor for a name
C<< $<foo> >>, C<< %.payload<foo> >> is used instead.

=head1 Related types

=head2 Failure

    class Failure is Mu {
        has Bool $.handled is rw;
        has $.X;            # the actual exception object
    }

An unthrown exception, usually produce by C<fail()>.

(Conjecture: S04 implies that all exceptions have a C<$.handled> attribute.
Do we actually need that?)

=head2 BackTrace

    class X::BackTrace does Positional[CallFrame] {
        method Str() { ... }
    }

Backtrace information, typically used (but not limited to) in exceptions.
Stringifies to

    in '$<routine>' at line $<line>:$<filename>
    in '$<routine>' at line $<line>:$<filename>
    ...

with two leading spaces on each line.

If a routine does not have a name, C<< <anon> >> is used instead of the
routine name.
