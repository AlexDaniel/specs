=encoding utf8

=head1 TITLE

DRAFT: Synopsis 32: Setting Library - Exceptions

=head1 AUTHORS

    Moritz Lenz <moritz@faui2k.org>

Authors of previous versions of this document:

    Tim Nelson <wayland@wayland.id.au>
    Larry Wall <larry@wall.org>

=head1 VERSION

    Created: 26 Feb 2009

    Last Modified: 3 Mar 2012
    Version: 8

The document is a draft.

If you read the HTML version, it is generated from the Pod in the specs
repository under
L<https://github.com/perl6/specs/blob/master/S32-setting-library/Exception.pod>
so edit it there in the git repository if you would like to make changes.

=head1 Roles and Classes

All built-in exceptions save for the base class C<Exception> live in the
C<X::> namespace.

Generally errors classes are supposed provide the objects involved with the
error, and only convert them to a string form when produciing the error
message. This does not apply to compile errors that involve types which have
not been fully composed yet; in that case just the name of the incomplete
type is included in the exception object.

=head2 Exception

All built-in exceptions inherit from C<Exception>, which provides some basic
behavior: storing a backtrace and providing an interface for the backtrace
printer.

    class Exception {
        has $.backtrace;
        method message() { ... } # an actual stub
        method gist { "$.message\n$.backtrace" }
        method throw() { }
    }

All direct subclasses are supposed to override method C<message>.

=head2 X::OS

    role X::OS { has $.os-error }

for all errors that are triggered by some error reported by the operating
system (failed IO, system calls, fork, memory allocation).

=head2 X::IO

    role X::IO does X::OS { }

For IO related errors

=head2 X::NYI

    role X::NYI {
        has $.feature;
    }

For errors that stem from incomplete implementations of the Perl 6 language.
A full Perl 6.0 implementation should not throw such errors.

=head2 X::Comp

    role X::Comp {
        has $.filename;
        has $.line;
        has $.column;
    }

For errors that arise from compiling code. Note that in this case the
backtrace shows how the
compilation was triggered (through C<use SomeModule;>, C<eval>s etc.).
The actual location of the error does not appear in the backtrace, but
rather in the attributes defined in this role.

For exceptions that can occur both at run time and at compile time, the base
exception type should not do C<X::Comp>, but it should be mixed in into
the exception object when thrown at compile time.

=head3 X::Syntax

    role X::Syntax does X::Comp { }

Common role for all syntax errors.

=head4 X::Syntax::Obsolete

    role X::Syntax::Obsolete does X::Syntax {
        has $.old;
        has $.new;
        has $.when = 'in Perl 6'
    }

Message defaults to C<< Unsupported use of $.old; $.when please use $.new >>.

=head4 X::Syntax::BadInfix

    role X::Syntax::BadInfx does X::Syntax {
        has $.bad;
    }

Message defaults to C<< Preceding context expects a term, but found infix $.bad instead >>.

=head2 X::AdHoc

    class X::AdHoc is Exception {
        has $.payload handles <Str Numeric>;
        method message() { $.payload.Str }
    }

If you call C<&die> with non-C<Exception> arguments, what the user finds
in his C<$!> variables is an object of type C<X::AdHoc>.

So C<&die> could be written as

    multi sub die(Exception $e) is hidden_from_backtrace {
        $e.throw
    }
    multi sub die($payload) is hidden_from_backtrace {
        X::AdHoc.new(:$payload).throw;
    }

=head1 Related types

=head2 Failure

    class Failure is Mu {
        has Bool $.handled is rw;
        has $.X;            # the actual exception object
    }

An unthrown exception, usually produce by C<fail()>.

(Conjecture: S04 implies that all exceptions have a C<$.handled> attribute.
Do we actually need that?)

=head2 Backtrace

    class Backtrace does Positional[Backtrace::Frame] {
        method Stringy() { ... }
        method full() { ... }
    }
    class Backtrace::Frame {
        has $.file;
        has $.line;
        has $.code;
        has $.subname;

        method is-hidden () { ... }
        method is-routine() { ... }
        method is-setting() { ... }
    }

Backtrace information, typically used (but not limited to) in exceptions.
Stringifies to

    in '$<routine>' at line $<line>:$<filename>
    in '$<routine>' at line $<line>:$<filename>
    ...

with two leading spaces on each line.

The default stringification includes blocks and routines from user-space
code, but from the setting only routines are shown [conjectural]. Routines
can be hidden from the default backtrace stringification by apply the
C<hidden_from_backtrace> trait:

    sub my-die(*@msg) is hidden_from_backtrace { }

the C<is-hidden> method in C<Backtrace::Frame> returns C<Bool::True> for routines
with that trait.

The C<full> method in C<Backtrace> provides a string representation of the
backtrace that includes all available code objects, including hidden ones.

If a code object does not have a name, C<< <anon> >> is used instead of the
routine name.

=head1 The Default Exception Printer

In case an exception does not get caught by any C<CATCH> or C<CONTROL> block,
it is caught by a default handler in the setting.

This handler calls the C<.gist> method on the exception, prints the result,
and terminates the program. The exit code is determined as
C<$exception.?exit-code // 1>.
