
=encoding utf8

=head1 TITLE

DRAFT: Synopsis 32: Setting Library - Exception

=head1 AUTHORS

    Moritz Lenz <moritz@faui2k.org>

Authors of previous versions of this document:

    Tim Nelson <wayland@wayland.id.au>
    Larry Wall <larry@wall.org>

=head1 VERSION

    Created: 26 Feb 2009

    Last Modified: 29 April 2011
    Version: 3

The document is a draft.

If you read the HTML version, it is generated from the Pod in the specs
repository under
L<https://github.com/perl6/specs/blob/master/S32-setting-library/Exception.pod>
so edit it there in the git repository if you would like to make changes.

=head1 Roles

All built-in exceptions live in the C<X::> namespace.

=head2 X::Base

All built-in exceptions inherit from C<X::Base>, which provides some basic
behavior: storing payload data, a backtrace, and providing stringification.

    class X::Base {
        has $.backtrace;
        has $.message;
        has %.payload;
        method Str { ... }
        method ID  { %.payload<ID>:exists ?? %.payload<ID> !! self.WHAT.perl }
    }

It also provides an C<ID> method, which is used to identify exceptions
for retrieving translated versions of error messages.

=head2 X::OSError

    role X::OSError { has $.os-error }

for all errors that are triggered by some error reported by the operating
system (failed IO, system calls, fork, memory allocation).

=head2 X::IO

    role X::IO { }

For IO related errors

=head2 X::NYI

    role X::NYI { }

For errors that stem from incomplete implementations of the Perl 6 language.
A full Perl 6.0 implementation should not throw such errors.

=head2 X::Compilation

    role X::Syntax {
        has $.filename;
        has $.line;
        has $.column;
    }

For errors that arise from compiling code. Note that in this case the
backtrace shows how the
compilation was triggered (through C<use SomeModule;>, C<eval>s etc.).
The actual location of the error does not appear in the backtrace, but
rather in the attributes defined in this role.
