=encoding utf8

=head1 TITLE

Synopsis 22: Distributions, Recommendations, Delivery and Installation

=head1 AUTHORS

    Elizabeth Mattijsen <liz@dijkmat.nl>

=head1 VERSION

    Created: 15 March 2014

    Last Modified: 15 March 2014
    Version: 1

=head1 Overview

=head2 Terminology

Because many of the concepts used in this document, may be overloaded by
other concepts in the mind of the reader, it seems like a good idea to define
some terminology first.  Please note that these definitions only apply within
the context of Perl 6.

=head3 compilation unit

A piece of code that can be compiled as a unit.  It can either exist in a
file (and be compiled using C<use> or C<require>, or be presented as a stream
of characters for complation with C<EVAL>.  An example of a compilation unit
in a file:

  lib/JSON/Fast.pm6

=head3 distribution

A distribution is an archive of some form that can be used to install zero
or more compilation units (each stored in a separate file), with any possibly
associated files needed for execution.  For example:

  lib/JSON/Fast.pm6
  lib/JSON/PurePerl.pm6

It has a name for identification, which may or may not coincide with the
compilation units in the distribution.  An example of a distribution name:

  JSON-Fast

It also has a version, to distinguish it from other distributions with the
same name.  For instance:

  1.23

Which, together, are used to create the filename of the distribution, for
instance:

  JSON-Fast.1.23.tar.gz

A Perl 6 distribution B<must> contain a configuration file named C<META6.json>
and contain JSON encoded information about the contents of the distribution.

=head3 owner

The owner of a distribution is responsible for the development of a
distribution.  This can either be a single person, or a (semi-)official
organisation.  The owner of a distribution has a (mnemonic) name, e.g.:

  JRANDOM

Please note that the owner is not necessarily the developer of a distribution,
although if the owner is a single individual, this is pretty likely.

=head3 content storage

A service to which an owner can upload a distribution to and other people can
download B<specific> distributions from.  This is most likely some online
web-service, but it does not need to be.  It has a logical name that is
essentially a URL.  An example would be:

  cpan

The name of the owner usually coincides with the userid or login name used
to upload distributions, but does not need to be.

=head3 auth

The C<auth> of a distribution, is the combination of the content storage name
with the name of the owner, separated by a colon.  For example:

  cpan:JRANDOM

Please note that this is B<not> an authority, merely an indication of the
location where the distribution for that owner was obtained.  Typically the
auth of a distribution is used to try to load compilation units of already
installed distributions, such as in:

  use JSON::Fast:auth<cpan:JRANDOM>;

=head3 identity

The identity of a distribution, is the combination of name of the content
storage, the owner, name and version of a distribution, separated by colons.
For example:

 cpan:JRANDOM:JSON-Fast:1.23

There should really be only one unique distribution for a given identity in the
world.

=head3 recommendation manager

A service that will translate a request for a compilation unit (with optional
owner and/or version and/or content storage specification, like a C<use>
statement) into a list of zero or more identities of distributions that match
the request.

The recommendation manager is only used during the installation process of
the distribution for a wanted compilation unit.

A recommendation manager can be run by a community (like the current Perl 6
ecosystem or the packages list for Perl 5 on CPAN), or by company (for use
inside the company itself), or by any reviewing / grading service (for use
by anybody wanting to use that service), or by any other person willing to
put in the effort.

A request for:

  JSON::PurePerl

would yield the identity:

  cpan:JRANDOM:JSON-Fast:1.23

because the compilation unit C<JSON::PurePerl> is part of the C<JSON::Fast>
distribution.

However, a request for:

  JSON::Fast:auth<github:JRANDOM>

would not find anything, because it has the wrong content storage specification.

=head1 Distribution

A Perl 6 distribution consists of an archive of some form (presumably a
.tar.gz, .tar.bz2 or .zip file) which is expected to at least contain a file
called "META6.json".  The existence of this file indicates that this
distribution is a Perl 6 distribution.  This is important for those archive
networks that also serve as a content-distribution system for other types
of distributions (such as PAUSE / CPAN), so that they can adapt the processing
of the contents, or decide to ignore any processing at all (such as CPAN-testers
not being able to test Perl 6 distributions (yet)).

=head2 META6.json

The META6.json file is a JSON-file that must at least contain a C<perl>,
C<name>, C<version> and C<description> section.

Please note that there is B<no> C<author> information in the meta information.
The author information is stored from the credentials used when uploading to
a repository.

=head3 perl

Mandatory.  The minimal perl version for which this distribution can be
installed.  Specified as a version string.  So:

  "perl" : "v6.0.1"

would not allow installation on Perl version 6.0.0.

=head3 name

Mandatory.  The name identifying this distribution.  This is usually the name
of the main module that this distribution provides.  An example of this would
be:

  "name" : "Dog"

=head3 version

Mandatory.  The version literal for this distribution.  An example of this
would be:

  "version" : "v1.0"

=head3 description

Mandatory.  A one line description of this distribution.  So, for instance:

  "description" : "Adding bite to your programs"

=head3 provides

Optional.  A list of module - filename pairs that this distribution makes
available to be C<use>d.  For example:

  "provides" : {
    "Dog" : "lib/Dog.pm6"
  }

=head3 depends

Optional.  A list of run-time dependencies, specified as C<use> strings.  An
example of this would be:

  "depends" : [
    "Canine:auth<cpan:*>:ver(1..*)"
  ]

An installer has the option to automatically install any dependencies, if the
use has so indicated.

=head3 emulates

Optional.  A hash in which the key is the compunit (provided by the
distribution) to be aliased, and the value is the use string that should match
to get that compilation unit.  An example of this would be:

  "emulates" : {
    "Dog" : "Wolf:auth<cpan:JRANDOM>:ver<1.0>"
  }

If then later, a program would say:

  use Wolf:auth<cpan:JRANDOM>:ver<1.0>;

it would in fact load the C<Dog> compunit, but make it appear as a C<Wolf>
compunit, but only if there was no "real" C<Wolf> compunit installed that would
match the C<use> specification.  In other words: if the real thing is available,
then it will be used.  If it is not, it will fall back to the indicated
compilation unit.

=head3 supersedes

Optional.  Has the same meaning as "emulates" for the L<CompUnitRepo>.
But has additional meaning for external packagers: it indicates a potential
superseding of the indicated compilation unit from the packagers point of
view.  See L<superseded_by>.

=head3 superseded_by

Optional.  Has the reverse meaning of "emulates" for the L<CompUnitRepo>.
It is a hash in which the key is compunit provided by the distribution, and
the value is the C<use> string of the compunit it should be aliased to if
that compunit is available.  So in this case:

  "superseded_by" : {
    "Dog" : "SuperDog:ver(v1.0 .. *)"
  }

it would mean that if a program attempts to load the C<Dog> compunit of this
distribution, it should instead use any C<SuperDog> compunit that is installed
that has a version of 1.0 or higher.  In other words: please don't use my
compunit, unless you really have to.

This tag has additional meaning for packagers: if a packager detects a valid
C<supersedes> and C<superseded_by> pair in its collection of distributions to
be packaged, the packager may decide to only supply the distribution providing
the C<superseded_by> compilation unit.

Please note that C<superseded_by> has no meaning as a C<depends>, so an
installer should probably not automatically install any C<superseded_by>
compunits.

=head3 excludes

Optional.  A list of modules to be disallowed, specified as C<use> strings.
An example of this would be:

  "excludes" : [
    "Tiger:auth<cpan:*>:ver(1..*)"
  ]

Trying to load a module that matches the C<use> string, will cause a failure.

=head3 build-depends

Optional.  A list of build-time dependencies, specified as C<use> strings.  An
example of this would be:

  "build-depends" : [
    "Archive::Zip"
  ]

=head3 test-depends

Optional.  A list of test-time dependencies, specified as C<use> strings.  An
example of this would be:

  "test-depends" : [
    "Test:auth<cpan:OVID>"
  ]

=head3 resource

Optional.  A hash of resource groups, each of them corresponding to a
directory in the "resource" directory in the distribution.  Each resource
group has a name and a list of files that are provided.  During installation
the installer will install these into a location, and make the files available
through the %?RESOURCE hash.  So, for example:

  "resource" : {
    "images" : {
      "fido.png"
    }
  }

would assume there is a file C<resource/images/fido.png>.  After installation,
the path of that file would be available through

  %?RESOURCE<images><fido.png>.path

and a handle could be obtained with:

  %?RESOURCE<images><fido.png>.IO

=head3 support

Optional.  A hash of key-value pairs regarding support for this distribution.
Possible names are: C<email>, C<mailinglist>, C<bugtracker>, C<source>,
C<irc>, C<phone>.

=head3 production

Optional.  A Boolean to indicate whether or not this is a distribution intended
to be used in production.  For instance:

 "production" : 1

By default, a distribution is not ready for production.  If a distribution
is not ready for production, then it will never be recommended.

=head2 Special directories

A distribution may contain several directories that will be handled
specially.

=head3 bin

Any file inside this directory, will be installed as a callable shell
application.

=head3 t

All C<.t> files in this directory, will be tested in alphabatical order,
possibly in parallel.  Any files in this directory will never be installed.

=for vim:set expandtab sw=4:
